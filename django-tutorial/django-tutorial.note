Kolla django version genom:
python -c "import django; print(django.get_version())"

Kolla python version genom:
sudo apt-get install python3
__________________

Skapa ett django projekt med namnet 'mysite' (både projektet och paktet får namnet mysite) 
django-admin.py startproject mysite
	En template man skulle kunna använda skulle vara:
		"django-admin startproject --template=/Users/jezdez/Code/my_project_template myproject"

Arbetar hårt på att få gitignore att fungera.

Hur Django processerar en request
	1: Django bestämmer root URLconf moduler att använda. Normalt sätt är detta värdet på ROOT_URLONF settingen, men om det inkommande HttpRequest-objektet har attribut som kallas urlconf (definierad av "middlware request processing") kommer detta värden att användas istället för ROOT_URLCONF settings.

	2: Django laddar den Python-modulen och letar efter variabeln urlpatterns. Detta borde vara en Python-lista, som i formatet som returneras av funktionen  django.conf.urls.patterns()

	3: Django kör igenom varje URL-mönster i ordning och stoppar vid den första som matchar den efterfrågade URLen.

	4: När en regex matchar, importerar och kallar Django på den givna "view:en", vilket är en enkel Python-funktion (eller en klassbaserad view). View:en tar emot följande argument
		- En instans av HttpRequest
		- Om de matchade reguljära uttrycken inte returnerar några namngivna grupper ges matchningarna från de reguljära uttrycken som positionella argument.
		- Nyckel-argumenten består av vilka namngivna grupper matchade av de reguljära uttrycken, överskrivna av vilket argument specifierade i de valfria kwargs argumenten till django.conf.urls.url().

	5: Om inga regex matchas, eller om ett exception tas upp under någon punkt under processen kallar Django på en lämplig error-hanterings-view.  
	
	^
	CREATING A PROJECT
	_________________

	DATABASE SETUP

	mysite/settings.py # Detta är en normal Python module 

	Kommer att köras genom SQLLite

	DATABASES = {
    	'default': {
        	'ENGINE': 'django.db.backends.sqlite3',
        	'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    	}
    }

	 os.path.join(BASE_DIR, 'db.sqlite3')
	 innebär att vi kommer att hålla databasfilen i projektmappen

	 Eftersom vi använder SQLite behöver vi itne USER, PASSWORD, HOST etc.
	 Vi behöver heller inte skapa en databas från början utan kan vara avnjuta Django som gör hela jobbet.

Nu ska vi skapa TABLES i vår databas (innan vi kan använda dem). Detta gör vi genom kommandot:

python manage.py migrate

Migrate kollar på INSTALLED_APPS och skapar alla databas-TABLES i enlighet med settings i mysite/settings.py-filen

Därefter kan man kontrollera sin databas genom 

sqlite3 
.schema
^
DATABASE SETUP
_____________________________________

THE DEVELOPMENT SERVER

Nu ska vi verifiera att Django-projektet fungerar. Vi byter till den yttre mysite-directory och kör följande kommando: 
python manage.py runserver 

VI ÄR LAJV½! 

Man kan även passa parametrar till runserver i.e. 8080 för en annan port eller x.x.x.x:port för en annan IP

______________________________________

CREATING MODELS

En modell är den enda definitiva källan till information om din data. Den innehåller de essentiella fälten och beteenden om den data du sparar. Generellt, varje modell mappar till ett enda databas-table

Now that your environment - a "project" is set up. SÅ ÄR VI REDO FÖR O KÖRA!

Varje applikation jag skriver i Django är ett Python package som följer en viss konvention. Django genererar bas-strukturen av en app automatiskt, så att vi kan fokusera på att skriva kod istället för att skapa mappar.

Projekt vs appar Vad är skillnaden? En app är web-applikation som gör någonting. T.ex. ett weblog system, en databas över offentliga filer eller en röstnings-applikation. Ett projekt är en samling konfigarioner och applikationer för en specifik web-site. Ett projekt kan innehålla flera applikationer och en applikation kan finnas i flera web-siter.

Dina applikationer kan leva var du vill i din Python path. I denna tutorial kommer vi skapa vår poll app precis brevid vår manage.py fil så att den kan importeras som sin egen top-level modul istället för att vara en submodul till mysite.

För att skapa din applikation, se till att du är i samma directory som manage.py och skriv in följande:

python manage.py starapp polls

Detta skapar en mapp polls som är strukturerad:

polls/
    __init__.py
    admin.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py

Detta directory kommer att hålla poll-applikationen. Det första steget i att skriva en databas-web app i django är att definiera dina modelz. Dvs din databas-layout, med extra metadata.

Din model kommer att vara den enda definitiva källan till data om din data. Den innehåller de essentiella fält och beteenden om den data du sparar.

I vår enkla poll applikation kommer vi skapa två modeller: Question och Choice. En Question har en question och ett publikations-datum. En Choice har två fält: Texten för det Choicet och en röstnings"-tally". Varje Choice är associerat till en Question.

Dessa koncept representeras via enkla python-klasser. Ändra polls/models.py-filen så att den ser ut såhär: (tutorial-text)

^
CREATING MODELS
_______________________________________

ACTIVATING MODELS

Med denna information som modellerna har kan Django skapa ett databas-schema för appen, samt skapa en 
Python databas-access API för att komma åt Questions och Choice objects.

Django appar är "pluggable" dvs du kan använda dem i flera olika projekt. Du kan distrubuera dina appar eftersom de inte behöver vara kopplade till en given django-installation.

-- Gå in i mysite/settings.py filen igen och ändra INSTALLED_APPS till att inkludera 'polls'

Nu vet Django att den ska inkludera polls appen. 

Låt oss köra ett annat kommando:

python manage.py makemigrations polls

När vi kör makemigration berättar vi för Django att vi gjort lite förändringar till modellerna (i detta fallet vi har gjort nya) och att vi skulle vilja att de förädringarna är sparade som en "migration"

En migration är alltså att spara en förändring vi gjort i vår databas

kommandot sqlmigrate kommandot tar migration-namen och returnerar deras SQL:

vi får t.ex:

BEGIN;
	CREATE TABLE "polls_choice" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "choice_text" varchar(200) NOT NULL, "votes" integer NOT NULL);

	CREATE TABLE "polls_question" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "question_text" varchar(200) NOT NULL, "pub_date" datetime NOT NULL);

	CREATE TABLE "polls_choice__new" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "choice_text" varchar(200) NOT NULL, "votes" integer NOT NULL, "question_id" integer NOT NULL REFERENCES "polls_question" ("id"));

	INSERT INTO "polls_choice__new" ("choice_text", "votes", "id", "question_id") SELECT "choice_text", "votes", "id", NULL FROM "polls_choice";

	DROP TABLE "polls_choice";

	ALTER TABLE "polls_choice__new" RENAME TO "polls_choice";

	CREATE INDEX "polls_choice_7aa0f6ee" ON "polls_choice" ("question_id");

Värt att notera:

	- Den exakta outputen beror på vilken databas vi använder (detta är för SQLite)
	- Namnen genereras automatiskt av namnet på appen följt av namnet på modellen (kolumnen)
		i.e. polls_question och polls_choice (detta går att ändra på)
	- Primary Keys (Ds) genereras automatiskt (detta går att ändra på)
	- Av konvention lägger django till "_id" till foreign key field name (detta går att ändra på)
		i.e "question" blir "question_id"
	- Denna foreign key relationen skapas explicit av en av en FOREIGN KEY constraint. Oroa er inte av 
	  DEFERRABLE delen (inte i sqllite) Det är bara ettk ommando som säger åt PostgreSQL att inte tvinga på Foreign key till att transationen är över.
	- Den är skräddarsydd för databasen du använder så att vissa databasspecifika-fält hanteras automatiskt 
	  samma gäller citering i fält. ie. " eller '.
	- sqlmigrate-kommandot kör faktiskt inte migrationen till din databas. Den printar endast så att du kan se 
	  vad SQL-Django tänker krävs. Det är användbart för att kolla vad Django kommer att göra om du har databas-administratörer som kräver SQL-scripts för förändringar.

Du kan pröva att köra 
python manage.py check
Denna kollar för några problem i ditt projekt utan att göra någon migration eller röra databasen.

Nu kör vi migrate igen för att skapa de modellerna i din databas.

Migrate kommandot tar alla migrationer som inte har applicerats (Django trackar vilka som har applicerats genom ett speciellt table i vår databas som kallas för django_migrations) och kör dem mot din databas essentiellt. synkroniserar de förändringar du gjort till de modeller med schemat i din databas.

Migrations är väldigt kraftfulla och låter dig förändra modeller över tid, när du utvecklar ditt projekt, utan behovet att ta bort din databas eller tables och göra nya. Den specialiserar i att uppgradera din databas live utan att förlora data. Vi kommer gå igenom dem djupare senare, men för tillfället kom ihåg tre-steg guiden till att göra modell-förändringar.

	 - För en förändring i dina modeller (i models.py)
	 - Kör python manage.py makemigrations
	 - Kör python manage.py migrate
_________________________________

PLAYING WITH THE API

Nu! Låt oss hoppa in och leka med det API du får från Django. För att aktivera python shell skriv:

python manage.py shell

Vi använder detta istället för att skriva python för att manage.py sätter DJANGO_SETTINGS_MODULE environment variabeln, vilket ger Django python-import-path till din mysite/settings.py file.

Du kan skippa detta och bara köra python

Då kör du DJANGO_SETTINGS_MODULE variabeln till mysite.settings, startar python och sätter upp django:

import django
django.setup()

Nu är det dags att utforska database API: (!!!!! :D :D :D !!!!!!)

>>> from polls.models import Question, Choice   
# Importerar modellklasserna vi precis skrev

# Inga frågor finns i systemet än
>>> Question.objects.all()
[]

# Skapa en ny fråga.
# Stöd för tidzoner är fixat i default settings file, så
# Django förväntar sig en datumtid med tzinfo för pubdate,
# För detta använder vi oss av timezone.now(), istället för
# datetime.datetime.now() och den kommer att gör allt rätt.
>>> from django.utils import timezone
>>> q = question(question_text="What's new?", pub_date=timezone.now())

# Sen sparar vi objektet i databasen, för detta måste vi kalla på save() explicit (på objektet).

# Nu har objetet ett ID. Notera att den kanske säger "1L" istället för "1", beroende på 
# vilken databas du använder. Detta är ingen biggie; det betyder endast att din
# databas backend föredrar att returnera integers som Python long Integer objekt.

>>> q.id
1

# Kolla på modellers fält-värden via dess Python-attributer
>>> q.question_text
"What's new?"

# Byt värden genom att ändra attributer och sedan kalla på save()
>>> q.question_text = "What's up?"
>>> q.save()

# objects.all() displayer alal questions i databasen
>>> Question.objects.all()
[<Question: Question object>]

Vänta lite! <Question: Question object> är ju en sjukt meningslös representation av detta objektet. Låt oss försöka fixa det genom att ändra på "Question modellen" (i polls/models.py filen) och lägga till en __str__() metod till både Question och Choice:

Det är viktigt att lägga till en __str__() metod till dina modeller, itne bara för din egen skull utan även för att objekt_representationer används genom hela djangos automatiskt genererade admin.

Notera att dessa är vanliga python-metoder. Låt oss lägga till en custom-metod endast för demonstration.
--(lägger till was_published_recently)
Notera att vi lägger till import datetime och from django.utis import timezone, detta är för att refererar till Python's standard datetime-modul och django's time-zonerelaterade verktyg i django.utils.timezone, respektive. Om du inte är van vid tid-zonshantering i Python så kan du lära dig mer i time zone support docs.

sen kör vi python manage.py shell igen (eller puthon3 manage.py shell)

>>> from polls.models import Question,Choice

## sedan kollar vi att vårt __str__()-tillägg fungerade
>> Question.objects.all()
[<Qhestion: What's up?>]
## Woohoo! Det fungerar

# Django förser dig med en rik databas-koll API som drivs helt av
# Keyword arguments. i.e.
>>> Question.objects.filter(question_text__startswith='What')
[<Question: What's up?>]

# Skaffa frågan som var publiserad detta år 
>>> from django.utils import timezone
>>> current_year = timezone.now().year
>>> Question.objects.get(pub_date__year=current_year)
<Question: What's up?>

# Begär en ID som inte existerar ger en exception
>>> Question.objects.get(id=2)
Traceback (most recent call last):
    ...
DoesNotExist: Question matching query does not exist.

# Att kolla via primary key är det vanligaste exemplet, så Django ger
# en genväg för primary key  exakta lookups

# Ge Question några Choices. Create-kallelsen konstuerar ett
# nytt Choice objekt, gör ett INSERT-statement, och lägger till
# valet till frågan av möjliga val och returnerar ett nytt choice objekt.
# Django skapar ett set för att hålla den "andra sidan" av en ForeignKey-relation
# (i.e. en frågas val) vilket kan finnas via API:et

# Detta APO följer automatiskt relationer så långt som behövs
# Använder dubbel _ (__) för att sepparera relationer
# Detta fungerar så många nivåeer som du behöver; finns ingen gräns.
# Finn alla Choices  för en given fråga vars pubdate är detta år
# (återanvänder 'current_year' variabeln vi skapade ovan)

# Låt oss  ta bort några av valen. Använd delete() för detta.

___________________________________


TUTORIAL 2 WRITING YOUR FIRST DJANGO APP

Django skapar admin interface automatiskt för models.

Django skrevs i ett nyhets-område med en klar uppdelning mellan "content publishers" och den offentliga sidan. Sidhanterare använder systemet för att lägga till nya stories, events och sport-resultat etc. detta material visas upp på den offentliga sidan. Django löser problemet av att skapa ett unifierat interface för att sido-administratörer ska kunna ändra innehållet.

Admin är inte menad att användas av besökare. Den är menad att användas av sidhanterare.

_________________________________

CREATING AN ADMIN USER

Förs måste vi skapa en användare som kan logga in till admin-siten. Kör följande kommando:

Python manage.py createsuperuser
(skriver in username, email och password)
finbel, p.oregan.87@gmail.com, p.*********

Därefter startar vi vår server genom att köra python manage.py runserver

Därefter öppnar vi 127.0.0.1:8000/admin vilket leder oss till loginsidan för django

Baserat på browsersettings är språket satt till olika då translation är påslaget på automatik

Nu ser vi django-admin-sidan. Vi bör se ett antal typer av redigerbar information: grupper och användare. Dessa är tillhandahållna av django.contrib.auth, authentication framwork:et som kommer med django.

_______________________

MAKE THE POLL APP MODIFIABLE IN THE ADMIN

Vi lägger till 

from polls.models import Question
admin.site.register(Question) 

i får polls/admin.py fil.
____________________________________

EXPLORE THE FREE ADMIN FUNCTIONALITY

Nu när vi har registrerat Question vet django att det borde displayas på admins index-page.

Går vi in på "Questions" så får vi se alla questions som finns i databasen, vi kan gå på på dem och vi kan lägga till nya frågor. Om vi går in på en fråga kan vi se följande:

- Formuläret är genererat från Question-modellen
- De olika model-field typerna (DateTimeField,CharField) korresponderar till lämpliga HTML-imput widgets
- Varje DateTimeField får gratis JavaScript-förkortningar. Datume får en "Today"-förkortning och en calendar-popup, och tider får en "Nu"-förkortning och en behändig popul som listar vanliga tider
------ Botten på sidan ger dig ett antal val 
- Save- Du kan spara ändringar och gå tillbaka till ändrings-liste sidan för denna typ av objekt.
- Save and continue editing - Sparar ändringar och laddar om admin-sidan för detta objekt.
- Save and add another - Sparar ändringar och laddar ett nytt blankt formulär för denna typ av objekt.
- Delete - Visar en bekräftelse för att ta bort objektet.

Om värdet av "Date published" inte matchar tiden du skapade frågan i Tutorial 1 betyder det att du antagligen inte satt korrekt TIME_ZONE setting. Ändra det, ladda om sidan och kontrollera att det korrekta värdet dyker upp.

Därefter ändrar vi lite och klickar save och därefter klickar vi på "History" uppe i hörnet. Du kommer att se en sida som listar alla förädnringar som gjorts till detta objektet via Django admin. Med timestamp och användarnamn från den som gjorde förändringen.
__________________________________

CUSTOMIZE THE ADMIN FORM

Ta några minuter och kolla på all kod du inte har behövt skriva. Genom att registrera Question-modellen via admin.site.register(Question) kunde django skapa all default form-representation. Ofta vill du skräddarsy hur en admin-form ser ut och fungerar. Detta gör du genom att säga till django vilka options du vill ha när du registrerar objektet.

Låt oss se hur detta fungerar genom att ordna om fälten på redigerings-forumäret. Byt ut admin.site.register(Question)-raden med:

class QuestionAdmin(admin.ModelAdmin):
	fields = ['pub_date', 'question_text']

	admin.site.register(Question, QuestionAdmin)

Du följer detta mönster: Skapa ett model admin objekt, därefter passa som det andra argumentet till 
admin.site.register() - närhelst du vill ändra admin-options för ett objekt.

Denna specifika förändringen gör att "Publication date" kommer före "Question"-fältet.

Detta är kanske inte så häftigt med bara två fält, men för admin-formulär med dussin av fält kan det betyda mycket att kunna bestämma ordningen.

Och på tal om dussin av fält, du kanske vil dela upp formuläret i fält-set?

class QuestionAdmin(admin.ModelAdmin):
	fieldsets = [
		(None, 				{'fields': ['question_text']}),
		('Date information',{'fields': ['pub_date']}),
	]

	Det första elementet av varje tuple i filedsets är titeln av field-settet. Här är hur det ser ut:

	Du kan tilldela godtyckliga HTML-klasser til varje set av fält, Django förser en "collapse" klass som visar upp ett specifikt filed-set som först är kollapsat. Detta är användbart när man har ett långt formulär som har ett antal fält som inte så ofta används.
__________________________________________________

ADDING RELATED OBJECTS

OK, vi har vår Question admin sida. Men en Question har multipla Choices, och admin sidan visar inte våra val. 
ÄN.

Det finns två sätt att lösa detta problemet. Det första är att registrera Choice med admin precis som vi gjorde med Question. Det är lätt.

admin.site.register(Choice)

vi kommer nu se att man måste välja Question när man skapar ett choice, den vet att en ForeignKey bör representeras i admin som en <select>-box, I vårt fall existerar bara en fråga vid detta tillfället.

Lägg även märke till "Add another" länken brevid "Question". Varje objekt med en ForeignKey-relation till ett annat objekt får detta på köpet. När du klickar på "Add another" får du ett popup-fönster med ett "Add question"-formulär. Om du lägger till en fråga i det fönstret och klickar på "Save" kommer Django att spara frågan till databasen och dynamiskt lägga till den som den valda frågan.

Men detta är ett ineffektivt sätt att lägga till choice-objekt i systemet. Det skulle vara bättre om du kunde lägga till en bunt egna val direkt, när du skapar Question-objektet. Låt oss fixa det!

Ta bort register() callet för Choice därefter fixar du Question-registreringen så att dne lyder

class ChoiceInline(admin.StackedInline):
	model = Choice
	extra = 3

class QuestioNadmin(admin.ModelAdmin):
	fieldsets = [ #...
	]
	inlines = [ChoiceInline]

Detta berättar för django: "Choice objekt editeras på Question admin-sidan, som standard förser vi tillräckligt många fält för tre val"

Ladda "Add question"-sidan för att se hur detta ser ut.

Det fungerar såhär: Det finns tre luckor för relaterade val, som specifierades med 'extra' - och varje gågn du kommer tillbaka till "Change" sidan för ett redan skapat objekt får du tre extra slots.

Vid slutet av de tre luckorna finner du en "Lägg till ett val"-länken. Om du klickar på den kommer det upp en ny lucka. Om du vill ta bort den tillvalda luckan kan du klicka på X:et i högra hörnet av den valda luckan. Notera att du inte kan ta bort de tre ursprungliga extra-valen.

Ett litet problem dock. Detta tar upp en stor del av skärmen för att visa alla dessa valen. För den orsaken ger django ett tabell-orienterat sätt att visa inline-relaterade objekt; du behöver bara ändra ChoiceInline-deklarationen till att heta admin.TabularInline istället för admin.StackedInline

Detta ger ett mer kompakt tabellorienterat sätt att presentera data.
_____________________________________

CUSTOMIZE THE ADMIN CHANGE LIST

Nu när Question-admin sidan ser bra ut, låt oss göra några förändringar till "change list" sidan, den som visar alla frågor i systemet. Såhär ser den ut nu:

Som standard visar django str()-metoden av varje objekt. Men ibland skulle det vara mer hjälpsamt om den kunde visa individuella fält. För att fixa detta, använd list_display admin funktionen. Detta är en tuple av fältnamn att displaya, på change-list sidan för objektet

Du kan klicka på toppen av kolumner för att sortera efter dessa värden, bortsett från valet av was_published_recently eftersom det inte finns stöd för att sortera efter output från en godtycklig metod. Lägg även märke till att kolumn-namnet för was_published_recently är, som standard, namnet på metoden (med underscores ersatt med spaces), och att varje rad har string-representationen av metodens output.

I polls/models.py kan vi lägga till ett antal attributer enligt följande:

def was_published_recently(self):
	return self.pub_date >= timezone.now() - datetime.timedelta(days=1)
was_published_recently.admin_order_field = 'pub_date'
was_published_recently.boolean = True
was_published_Recently.short_description = 'published recently?'

mer information om dessa attributer under list_display

Ändra din polls/admin.py file igen och lägg till en förbättring till Question change-list sidan: filters som använder list_filter. Lätt till den följande raden till QuestionAdmin:

list_filter = ['pub_date']

Detta lägger till en "Filter"-sidobar som låter folk filtrera listan över pub_date-fältet. Det typ av filter som visas beror på typen av fältet. Eftersom pub_date är ett DateTimeField vet Django att den kan lägga till exempelsvar som t.ex. "Today" "This month" etc.

Nu vill vi lägga till lite search-möjligheter!

search_fields = ['question_text']

Detta lägger till en sök-ruta vid toppen av förändrings-listan. När någon lägger in sök-rader kommer django söka question_text-fältet. Du kan lägga in så många fält som du vill, men eftersom den använder en LIKE-query bakom allt så innebär det att man bör begränsa det antalet av sökfält till ett lämpligt nummer så att det blir lättare för dig att söka på databasen.

Nu är det även ett bra tillfälle att notera att förändringslistor ger dig gratis "pagination". Standard är att visa 100 saker per sida. Change list pagination, search boxes, filters, date-hierarchies, och column-header-ordering arbetar alla tillsammans som du förväntar dig att dem gör.
_______________________________

CUSTOMIZE THE ADMIN LOOK AND FEEL

Det är uppenbart löjligt att ha "Django administration" vid toppen av varje admin-sida. Det är bara en platshållare-text. Detta är dock lätt att fixa genom att använda Django's template-system. Django admin försers av django själv, och det interface använder django's egna template system.

_______________________________________

CUSTOMIZING YOUR ADMIN SITE'S TEMPLATES 

Skapa en templates-mapp i din projektmapp (den som håller manage.py). Templates kan leva var som helst i ditt filsystem som django har åtkomst till. (Django kör som den typ av användare din server kör). Det är oavsett alltid god konvention att hålla dina templates inom projektet.

Därefter ska vi i mysite/settings.py lägga till följande:

TEMPLATE_DIRS = [os.path.join(BASE_DIR, 'templates')]

Detta är en iterable av filsystem-mappar att kolla när vi laddar Django-templates (en sök-väg).

Nu skapa en mapp som heter admin innuti templates och kopiera mallen för admin/base_site.html från standard django mall-mapen i django själv django/contrib/admin/templates

Nu har vi gjort detta, gått in i den och ändrat på dess information så att sidan inte längre heter det vanliga utan numera heter Best Page In The Universe.

Detta visar hur man skriver över mallar. I ett riktigt projekt skulle man antagligen använda django.contrib.admin.AdminSite.site_header attributen för att lättare göra den här specifika justeringen.

Den här mallen innehåller mycket text i stil med {% block branding %} och {{Title}}. {% och {{-tecknenea är delar av Djangos mall-språk. När Django läser admin/base_site.html, kommer det här template-språket användas för att producera den slutgiltiga HTML-sidan. Oroa dig inte om du inte förstår någonting om templates just nu, vi kommer att dyka djuare i django's mall-språk i tutorial 3.

Notera även att djangos standard-admin kan skrivas över. För att skriva över en template bara kopiera den från standard-mappen till din egna justerade mapp och gör förändringarna.
________________________

CUSTOMIZING YOUR APPLICATION'S TEMPLATES

Skarpsinniga läsare kommer att fråga: Men om TEMPLATE_DIRS var tom från standard hur kunde Django hitta standard admin-templates? Svaret är, av standard, django kollar automatiskt för en templates/ undermapp inom varje applikations paket för att använda som en fallback (glöm inte att django.contrib.admin är en applikation).

Vår poll-applikation är inte speciellt komplex och behöver inte skräddarsydd admin-template. Men om den växte till att bli mer sofistikerade och krävde modifikation av django's standard admin-template för delar av sin funktionalitet skulle det vara remligt att modifiera __applikationens__ template, istället för mallar i projektet. På det sättet kan du inkludera applikationen i ett nytt projekt och vara säker på att det kommer finna applikationens template om det behövs.
______________________________

CUSTOMIZE THE ADMIN INDEX PAGE

På ett liknande sätt kan du kanske vilja skräddarsy utseendet ochkänslan av django's admin index-sida.

Som default så visas alla appar i INSTALLED_APPS som har registrerats med admin-applikationer i alfabetisk ordning. Du kanske vill göra större förändringar till layouten, trots allt, index är möjligtvis den viktigaste delen för admin och bör vara lätt att använda.

För att justera mallen ska vi göra precis som vi gjorde med base_site.html fast med index.html.